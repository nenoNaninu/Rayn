@model ThreadRoomViewModel
@{
    Debug.Assert(Model is not null);

    ViewData["BrandOverWriteValue"] = Model.ThreadTitle;
    ViewData["Title"] = Model.ThreadTitle;
}

<div id="app">
    <div class="hero is-warning is-small">
        <div class="hero-body is-dark">
            <div class="columns">
                <div class="column is-8 is-offset-1">
                    <div class="field">
                        <div class="control">
                            <input type="text" class="input" v-model="message" placeholder="message" v-on:keydown.enter="OnEnterInTextArea" />
                        </div>
                    </div>
                </div>
                <div class="column is-3">
                    <div class="button is-3 is-primary" v-on:click="OnSend" v-bind:disabled="isSendButtonDisable">送信</div>
                </div>
            </div>
        </div>
    </div>
    <div class="hero is-light is-fullheight">
        <div class="section">
            <div class="container">
                <message-item v-for="item in chatMessages" v-bind:key="item.id" v-bind:chatdata="item"></message-item>
            </div>
        </div>
    </div>
</div>


@section Scripts {
<environment include="Development">
    <script src="~/lib/signalr/dist/browser/signalr.js"></script>
</environment>
<environment exclude="Development">
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
</environment>

<script>

    var messageCount = 1;

    Vue.component('message-item',
        {
            props: ['chatdata'],
            template: `<div class="box">
                        <p> {{chatdata.message}}</p>
                    </div > `
        });

    const app = new Vue({
        el: '#app',
        data: {
            message: '',
            uri: '@Model.ThreadRoomHubUrl()',
            isSendButtonDisable: true,
            connection : null,

            chatMessages: [
            ]
        },
        mounted: function () {
            const connection = new signalR.HubConnectionBuilder()
                    .withUrl(this.uri)
                    .withAutomaticReconnect()
                    .build();

            this.connection = connection;

            connection.on("EnterRoomResultAsync", (result, messages) => {
                console.log(result);
                if (result) {
                    console.log("success enter room");

                    if (messages) {
                        messages.forEach(message => {
                            message["id"] = messageCount;
                            messageCount++;
                            this.chatMessages.unshift(message);
                        });
                    }

                } else {
                    // まぁ実際にはモーダルとか出すべきなんでしょう。
                    console.log("cannot enter room");
                }
            });

            connection.on("ReceiveMessageFromServer", message => {
                console.log(message);

                console.log("on message!");

                message["id"] = messageCount;
                messageCount++;
                this.chatMessages.unshift(message);

            });

            connection.start().then(() => {
                connection
                    .invoke("EnterThreadRoom", "@Model.ThreadId.ToString()")
                    .catch(err => {
                        return console.error(err.toString());
                    });
                this.isSendButtonDisable = false;

            }).catch(err => {
                return console.error(err.toString());
            });
        },
        methods: {
            OnSend: function () {
                if (this.message) {

                    this.connection
                        .invoke("PostMessageToServer", { "message": this.message })
                        .catch(function (e) {
                            return console.error(e.toString());
                        });

                    this.message = "";
                }
            },

            OnEnterInTextArea: function (event) {
                if (event.keyCode !== 13)
                {
                    return;
                }

                this.OnSend();
            }
        }
    });

</script>
}
