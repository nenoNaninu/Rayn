@model ThreadRoomViewModel
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@

@{
    Layout = "_ThreadRoomLayout";
    ViewData["ThreadTitle"] = Model.ThreadTitle;
}

<div id="app">
    <div class="hero is-warning is-small">
        <div class="hero-body is-dark">
            <div class="columns">
                <div class="column is-8 is-offset-1">
                    <div class="field">
                        <div class="control">
                            <input type="text" class="input" v-model="message" placeholder="message" v-on:keydown.enter ="OnEnterInTextArea" />
                        </div>
                    </div>
                </div>
                <div class="column is-3">
                    <div class="button is-3 is-primary" v-on:click="OnSend" v-bind:disabled="isSendButtonDisable">送信</div>
                </div>
            </div>
        </div>
    </div>
    <div class="hero is-light is-fullheight">
        <div class="section">
            <div class="container">
                <message-item v-for="item in chatMessages" v-bind:key="item.id" v-bind:chatdata="item"></message-item>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script>

        var socket = null;
        var messageCount = 1;
        const encoder = new TextEncoder("utf-8");
        const decoder = new TextDecoder("utf-8");

        Vue.component('message-item',
            {
                props: ['chatdata'],
                template: `<div class="box">
                            <p> {{chatdata.Message}}</p>
                        </div > `
            });

        const app = new Vue({
            el: '#app',
            data: {
                message: '',
                uri: '@Model.RealTimeUrl()',
                name: '',

                isSendButtonDisable: false,

                chatMessages: [
                ]
            },
            methods: {
                OnConnect: function() {
                    if (!this.uri && !this.name) {
                        return;
                    }
                    console.log(this.uri);

                    socket = new WebSocket(this.uri);
                    socket.binaryType = "arraybuffer";

                    socket.onopen = function(event) {
                        console.log("opened connection to ");
                        console.log(app.uri);
                    };

                    socket.onclose = function(event) {
                        console.log("closed websocket connection");
                    };

                    socket.onmessage = function(event) {
                        console.log("on message!!!!!!!!!!!!!!!!!");
                        console.log(event.data);

                        let jsonContent = JSON.parse(decoder.decode(event.data));
                        console.log(jsonContent);
                        jsonContent["id"] = messageCount;
                        messageCount++;
                        app.chatMessages.unshift(jsonContent);
                    };

                    socket.onerror = function(event) {
                        console.log("error: " + event.data);
                    };

                    this.isSendButtonDisable = false;

                },

                OnClose: function() {
                    socket.close();
                    this.isSendButtonDisable = true;
                },

                OnSend: function () {
                    if (this.message) {
                        console.log("Sending: " + this.message);
                        let jsonBytes = JSON.stringify({ "Message": this.message });
                        console.log(jsonBytes);
                        socket.send(encoder.encode(jsonBytes));
                        this.message = "";
                    }
                },

                OnEnterInTextArea: function (event) {
                    if (event.keyCode !== 13)
                    {
                        return;
                    }

                    app.OnSend();
                }
            }
        });

        app.OnConnect();
    </script>
}